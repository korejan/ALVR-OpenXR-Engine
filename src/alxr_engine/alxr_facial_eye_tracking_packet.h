#pragma once
#ifndef ALXR_FACIAL_TRACKING_PACKET_H
#define ALXR_FACIAL_TRACKING_PACKET_H
#include "alxr_ctypes.h"

#ifdef XR_USE_PLATFORM_WIN32
#ifdef ENGINE_DLL_EXPORTS
    /*Enabled as "export" while compiling the dll project*/
    #define DLLEXPORT __declspec(dllexport)  
#else
    /*Enabled as "import" in the Client side for using already created dll file*/
    #define DLLEXPORT __declspec(dllimport)  
#endif
#else
#define DLLEXPORT
#endif

#ifdef __cplusplus
extern "C" {;
#endif

typedef enum ALXREyeExpressionFB {
    ALXR_EYE_EXPR_BROW_LOWERER_L_FB = 0,
    ALXR_EYE_EXPR_BROW_LOWERER_R_FB,
    ALXR_EYE_EXPR_EYES_CLOSED_L_FB,
    ALXR_EYE_EXPR_EYES_CLOSED_R_FB,
    ALXR_EYE_EXPR_EYES_LOOK_DOWN_L_FB,
    ALXR_EYE_EXPR_EYES_LOOK_DOWN_R_FB,
    ALXR_EYE_EXPR_EYES_LOOK_LEFT_L_FB,
    ALXR_EYE_EXPR_EYES_LOOK_LEFT_R_FB,
    ALXR_EYE_EXPR_EYES_LOOK_RIGHT_L_FB,
    ALXR_EYE_EXPR_EYES_LOOK_RIGHT_R_FB,
    ALXR_EYE_EXPR_EYES_LOOK_UP_L_FB,
    ALXR_EYE_EXPR_EYES_LOOK_UP_R_FB,
    ALXR_EYE_EXPR_INNER_BROW_RAISER_L_FB,
    ALXR_EYE_EXPR_INNER_BROW_RAISER_R_FB,
    ALXR_EYE_EXPR_LID_TIGHTENER_L_FB,
    ALXR_EYE_EXPR_LID_TIGHTENER_R_FB,
    ALXR_EYE_EXPR_OUTER_BROW_RAISER_L_FB,
    ALXR_EYE_EXPR_OUTER_BROW_RAISER_R_FB,
    ALXR_EYE_EXPR_UPPER_LID_RAISER_L_FB,
    ALXR_EYE_EXPR_UPPER_LID_RAISER_R_FB,
    ALXR_EYE_EXPR_COUNT_FB,
    ALXR_EYE_EXPR_MAX_ENUM_FB = 0x7FFFFFFF
} ALXREyeExpressionFB;

typedef enum ALXRLowerFaceExpressionFB {
    ALXR_LOWER_FACE_EXPR_CHEEK_PUFF_L_FB = 0,
    ALXR_LOWER_FACE_EXPR_CHEEK_PUFF_R_FB,
    ALXR_LOWER_FACE_EXPR_CHEEK_RAISER_L_FB,
    ALXR_LOWER_FACE_EXPR_CHEEK_RAISER_R_FB,
    ALXR_LOWER_FACE_EXPR_CHEEK_SUCK_L_FB,
    ALXR_LOWER_FACE_EXPR_CHEEK_SUCK_R_FB,
    ALXR_LOWER_FACE_EXPR_CHIN_RAISER_B_FB,
    ALXR_LOWER_FACE_EXPR_CHIN_RAISER_T_FB,
    ALXR_LOWER_FACE_EXPR_DIMPLER_L_FB,
    ALXR_LOWER_FACE_EXPR_DIMPLER_R_FB,
    ALXR_LOWER_FACE_EXPR_JAW_DROP_FB,
    ALXR_LOWER_FACE_EXPR_JAW_SIDEWAYS_LEFT_FB,
    ALXR_LOWER_FACE_EXPR_JAW_SIDEWAYS_RIGHT_FB,
    ALXR_LOWER_FACE_EXPR_JAW_THRUST_FB,
    ALXR_LOWER_FACE_EXPR_LIP_CORNER_DEPRESSOR_L_FB,
    ALXR_LOWER_FACE_EXPR_LIP_CORNER_DEPRESSOR_R_FB,
    ALXR_LOWER_FACE_EXPR_LIP_CORNER_PULLER_L_FB,
    ALXR_LOWER_FACE_EXPR_LIP_CORNER_PULLER_R_FB,
    ALXR_LOWER_FACE_EXPR_LIP_FUNNELER_LB_FB,
    ALXR_LOWER_FACE_EXPR_LIP_FUNNELER_LT_FB,
    ALXR_LOWER_FACE_EXPR_LIP_FUNNELER_RB_FB,
    ALXR_LOWER_FACE_EXPR_LIP_FUNNELER_RT_FB,
    ALXR_LOWER_FACE_EXPR_LIP_PRESSOR_L_FB,
    ALXR_LOWER_FACE_EXPR_LIP_PRESSOR_R_FB,
    ALXR_LOWER_FACE_EXPR_LIP_PUCKER_L_FB,
    ALXR_LOWER_FACE_EXPR_LIP_PUCKER_R_FB,
    ALXR_LOWER_FACE_EXPR_LIP_STRETCHER_L_FB,
    ALXR_LOWER_FACE_EXPR_LIP_STRETCHER_R_FB,
    ALXR_LOWER_FACE_EXPR_LIP_SUCK_LB_FB,
    ALXR_LOWER_FACE_EXPR_LIP_SUCK_LT_FB,
    ALXR_LOWER_FACE_EXPR_LIP_SUCK_RB_FB,
    ALXR_LOWER_FACE_EXPR_LIP_SUCK_RT_FB,
    ALXR_LOWER_FACE_EXPR_LIP_TIGHTENER_L_FB,
    ALXR_LOWER_FACE_EXPR_LIP_TIGHTENER_R_FB,
    ALXR_LOWER_FACE_EXPR_LIPS_TOWARD_FB,
    ALXR_LOWER_FACE_EXPR_LOWER_LIP_DEPRESSOR_L_FB,
    ALXR_LOWER_FACE_EXPR_LOWER_LIP_DEPRESSOR_R_FB,
    ALXR_LOWER_FACE_EXPR_MOUTH_LEFT_FB,
    ALXR_LOWER_FACE_EXPR_MOUTH_RIGHT_FB,
    ALXR_LOWER_FACE_EXPR_NOSE_WRINKLER_L_FB,
    ALXR_LOWER_FACE_EXPR_NOSE_WRINKLER_R_FB,
    ALXR_LOWER_FACE_EXPR_UPPER_LIP_RAISER_L_FB,
    ALXR_LOWER_FACE_EXPR_UPPER_LIP_RAISER_R_FB,
    ALXR_LOWER_FACE_EXPR_COUNT_FB,
    ALXR_LOWER_FACE_EXPR_MAX_ENUM_FB = 0x7FFFFFFF
} ALXRLowerFaceExpressionFB;

typedef enum ALXREyeExpressionHTC {
    ALXR_EYE_EXPR_LEFT_BLINK_HTC = 0,
    ALXR_EYE_EXPR_LEFT_WIDE_HTC = 1,
    ALXR_EYE_EXPR_RIGHT_BLINK_HTC = 2,
    ALXR_EYE_EXPR_RIGHT_WIDE_HTC = 3,
    ALXR_EYE_EXPR_LEFT_SQUEEZE_HTC = 4,
    ALXR_EYE_EXPR_RIGHT_SQUEEZE_HTC = 5,
    ALXR_EYE_EXPR_LEFT_DOWN_HTC = 6,
    ALXR_EYE_EXPR_RIGHT_DOWN_HTC = 7,
    ALXR_EYE_EXPR_LEFT_OUT_HTC = 8,
    ALXR_EYE_EXPR_RIGHT_IN_HTC = 9,
    ALXR_EYE_EXPR_LEFT_IN_HTC = 10,
    ALXR_EYE_EXPR_RIGHT_OUT_HTC = 11,
    ALXR_EYE_EXPR_LEFT_UP_HTC = 12,
    ALXR_EYE_EXPR_RIGHT_UP_HTC = 13,
    ALXR_EYE_EXPR_COUNT_HTC = 14,
    ALXR_EYE_EXPR_MAX_ENUM_HTC = 0x7FFFFFFF
} ALXREyeExpressionHTC;

typedef enum ALXRLowerFaceExpressionHTC {
    ALXR_LOWER_FACE_EXPR_JAW_RIGHT_HTC = 0,
    ALXR_LOWER_FACE_EXPR_JAW_LEFT_HTC = 1,
    ALXR_LOWER_FACE_EXPR_JAW_FORWARD_HTC = 2,
    ALXR_LOWER_FACE_EXPR_JAW_OPEN_HTC = 3,
    ALXR_LOWER_FACE_EXPR_MOUTH_APE_SHAPE_HTC = 4,
    ALXR_LOWER_FACE_EXPR_MOUTH_UPPER_RIGHT_HTC = 5,
    ALXR_LOWER_FACE_EXPR_MOUTH_UPPER_LEFT_HTC = 6,
    ALXR_LOWER_FACE_EXPR_MOUTH_LOWER_RIGHT_HTC = 7,
    ALXR_LOWER_FACE_EXPR_MOUTH_LOWER_LEFT_HTC = 8,
    ALXR_LOWER_FACE_EXPR_MOUTH_UPPER_OVERTURN_HTC = 9,
    ALXR_LOWER_FACE_EXPR_MOUTH_LOWER_OVERTURN_HTC = 10,
    ALXR_LOWER_FACE_EXPR_MOUTH_POUT_HTC = 11,
    ALXR_LOWER_FACE_EXPR_MOUTH_SMILE_RIGHT_HTC = 12,
    ALXR_LOWER_FACE_EXPR_MOUTH_SMILE_LEFT_HTC = 13,
    ALXR_LOWER_FACE_EXPR_MOUTH_SAD_RIGHT_HTC = 14,
    ALXR_LOWER_FACE_EXPR_MOUTH_SAD_LEFT_HTC = 15,
    ALXR_LOWER_FACE_EXPR_CHEEK_PUFF_RIGHT_HTC = 16,
    ALXR_LOWER_FACE_EXPR_CHEEK_PUFF_LEFT_HTC = 17,
    ALXR_LOWER_FACE_EXPR_CHEEK_SUCK_HTC = 18,
    ALXR_LOWER_FACE_EXPR_MOUTH_UPPER_UPRIGHT_HTC = 19,
    ALXR_LOWER_FACE_EXPR_MOUTH_UPPER_UPLEFT_HTC = 20,
    ALXR_LOWER_FACE_EXPR_MOUTH_LOWER_DOWNRIGHT_HTC = 21,
    ALXR_LOWER_FACE_EXPR_MOUTH_LOWER_DOWNLEFT_HTC = 22,
    ALXR_LOWER_FACE_EXPR_MOUTH_UPPER_INSIDE_HTC = 23,
    ALXR_LOWER_FACE_EXPR_MOUTH_LOWER_INSIDE_HTC = 24,
    ALXR_LOWER_FACE_EXPR_MOUTH_LOWER_OVERLAY_HTC = 25,
    ALXR_LOWER_FACE_EXPR_TONGUE_LONGSTEP1_HTC = 26,
    ALXR_LOWER_FACE_EXPR_TONGUE_LEFT_HTC = 27,
    ALXR_LOWER_FACE_EXPR_TONGUE_RIGHT_HTC = 28,
    ALXR_LOWER_FACE_EXPR_TONGUE_UP_HTC = 29,
    ALXR_LOWER_FACE_EXPR_TONGUE_DOWN_HTC = 30,
    ALXR_LOWER_FACE_EXPR_TONGUE_ROLL_HTC = 31,
    ALXR_LOWER_FACE_EXPR_TONGUE_LONGSTEP2_HTC = 32,
    ALXR_LOWER_FACE_EXPR_TONGUE_UPRIGHT_MORPH_HTC = 33,
    ALXR_LOWER_FACE_EXPR_TONGUE_UPLEFT_MORPH_HTC = 34,
    ALXR_LOWER_FACE_EXPR_TONGUE_DOWNRIGHT_MORPH_HTC = 35,
    ALXR_LOWER_FACE_EXPR_TONGUE_DOWNLEFT_MORPH_HTC = 36,
    ALXR_LOWER_FACE_EXPR_COUNT_HTC = 37,
    ALXR_LOWER_FACE_EXPR_MAX_ENUM_HTC = 0x7FFFFFFF
} ALXRLowerFaceExpressionHTC;

inline constexpr const std::size_t MaxEyeCount = 2;
inline constexpr const std::size_t MaxEyeExpressionCount = ALXR_EYE_EXPR_COUNT_FB;
inline constexpr const std::size_t MaxLowerFaceExpressionCount = ALXR_LOWER_FACE_EXPR_COUNT_FB;
inline constexpr const std::size_t MaxExpressionCount = MaxEyeExpressionCount + MaxLowerFaceExpressionCount;

static_assert(XR_FACE_EXPRESSION_COUNT_FB <= MaxExpressionCount);
static_assert(XR_FACIAL_EXPRESSION_EYE_COUNT_HTC <= MaxEyeExpressionCount);
static_assert(XR_FACIAL_EXPRESSION_LIP_COUNT_HTC <= MaxLowerFaceExpressionCount);
static_assert((XR_FACIAL_EXPRESSION_LIP_COUNT_HTC + XR_FACIAL_EXPRESSION_EYE_COUNT_HTC) <= MaxExpressionCount);

#pragma pack(push, 1)
struct ALXRFacialEyePacket {
    ALXRFacialExpressionType eyeExpressionType;
    ALXRFacialExpressionType lowerFaceExpressionType;
    ALXRFacialExpressionType expressionType;
    ALXREyeTrackingType      eyeTrackerType;
    std::uint8_t             isEyeFollowingBlendshapesValid;
    std::uint8_t             isEyeGazePoseValid[MaxEyeCount];
    XrPosef                  eyeGazePoses[MaxEyeCount];
    float                    eyeExpressionWeights[MaxEyeExpressionCount];
    float                    lowerFaceExpressionWeights[MaxLowerFaceExpressionCount];
        
    float expressionWeights[64];
};
#pragma pack(pop)

struct ALXRProcessFrameResult {
    ALXRFacialEyePacket* newPacket;
    bool                 exitRenderLoop;
    bool                 requestRestart;
};
DLLEXPORT void alxr_process_frame2(ALXRProcessFrameResult* result);

#ifdef __cplusplus
}
#endif
#endif
